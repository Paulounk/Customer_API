package com.challenge.keeggo.resource;

import org.springframework.http.MediaType;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;

import com.challenge.keeggo.dto.CustomerDTO;
import com.challenge.keeggo.entity.Customer;
import com.challenge.keeggo.service.CustomerService;

@SpringBootTest
@ActiveProfiles("test")
@WebMvcTest(controllers = CustomerResource.class)
@AutoConfigureMockMvc
public class CustomerResourceTest {

	static final String API = "/customers";
	static final MediaType JSON = MediaType.APPLICATION_JSON;
	
	@Autowired
	MockMvc mvc;
	
	@MockBean 
	CustomerService service;
	
	@Test
	public void mustSaveACustomer() throws Exception {
		
		//scenary
		CustomerDTO customer = CustomerDTO.builder()
				.email("paulo@hotmail.com")
				.password("123456")
				.name("Paulo")
				.cpf("848484856").build();
	
		Mockito.when(service.customerSignup(Mockito.any(CustomerDTO.class))).thenReturn(user);
		
		//Action e Verification
		String json = new ObjectMapper().writeValueAsString(user);
		
		MockHttpServletRequestBuilder request = MockMvcRequestBuilders
												.post(API)
												.accept(JSON)
												.contentType(JSON)
												.content(json);
		
		mvc
			.perform(request)
			.andExpect(MockMvcResultMatchers.status().isCreated());
				
	}
}
