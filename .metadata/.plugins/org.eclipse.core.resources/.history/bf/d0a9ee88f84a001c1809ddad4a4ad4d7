package com.challenge.keeggo.resource;

import org.springframework.http.MediaType;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;

import com.challenge.keeggo.dto.CustomerDTO;
import com.challenge.keeggo.entity.Address;
import com.challenge.keeggo.service.CustomerService;
import com.fasterxml.jackson.databind.ObjectMapper;

@SpringBootTest
@ActiveProfiles("test")
public class CustomerResourceTest {

	String API = "/customers";
	MediaType JSON = MediaType.APPLICATION_JSON;
	
	@Autowired
	MockMvc mvc;
	
	@MockBean 
	CustomerService service;
	
	@Test
	public void mustSaveACustomer() throws Exception {
		
		//Scenery
		Address address = Address.builder()
				.id(1l)
				.street("Rua Teste")
				.number("10")
				.complement("02")
				.neighborhood("Vila Centro")
				.city("Campinas")
				.state("SÃ£o Paulo").build();
		
		CustomerDTO customer = CustomerDTO.builder()
				.id(1l)
				.email("paulo@hotmail.com")
				.password("123456")
				.name("Paulo")
				.cpf("848484856")
				.address(address)
				.build();
	
		Mockito.when(service.customerSignup(Mockito.any(CustomerDTO.class))).thenReturn(customer);
		
		//Action e Verification
		String json = new ObjectMapper().writeValueAsString(customer);
		
		MockHttpServletRequestBuilder request = MockMvcRequestBuilders
												.post(API)
												.accept(JSON)
												.contentType(JSON)
												.content(json);
		
		mvc.perform(request)
			.andExpect(MockMvcResultMatchers.status().isCreated());
				
	}
}
