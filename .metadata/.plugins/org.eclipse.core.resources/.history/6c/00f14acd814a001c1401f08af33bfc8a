package com.challenge.keeggo.resource;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.challenge.keeggo.dto.CustomerDTO;
import com.challenge.keeggo.dto.CustomerRequestDTO;
import com.challenge.keeggo.exception.BusinessRuleException;
import com.challenge.keeggo.service.CustomerService;

@RestController
@RequestMapping("/customers")
@CrossOrigin("*")
public class CustomerController {

	@Autowired
	private CustomerService service;

	@GetMapping
	public ResponseEntity<List<CustomerDTO>> getAllCustomers() {
		return ResponseEntity.ok(service.getAllCustomers());
	}

	@GetMapping("/{id}")
	public ResponseEntity<CustomerDTO> getCustomerById(@PathVariable Long id) {

		return service.getCustomerById(id).map(resp -> ResponseEntity.ok(resp))
				.orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());
	}

	@PostMapping("/sign-up")
	public ResponseEntity<?> customerSignup(@RequestBody @Valid CustomerDTO  ) {
		
		try {
			Customer customerSave = service.customerSignup(customerLoginDTO);
			return ResponseEntity.status(HttpStatus.CREATED).body(customerSave);
		} catch (BusinessRuleException e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}
	
	@PostMapping("/login")
	public ResponseEntity<?> customerLogin(@RequestBody CustomerLoginDTO customerLogin) {
		
		try {
			CustomerLoginDTO customer = service.customerLogin(customerLogin);
			return ResponseEntity.ok(customer);
		} catch (BusinessRuleException e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}

	@PutMapping("/update")
	public ResponseEntity<?> customerUpdate(@RequestBody @Valid Customer customer) {
		
		try {
			service.customerUpdate(customer);
			return ResponseEntity.ok(customer);
		} catch (ResponseStatusException e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}
	
	@DeleteMapping("/delete/{id}")
	public ResponseEntity<?> deleteCustomer(@PathVariable Long id) {
		try {
			service.customerDelete(id);
			return ResponseEntity.ok("User deleted successfully!");
		}catch(ResponseStatusException e) {
			return ResponseEntity.badRequest().body(e.getMessage());
		}
	}
}
